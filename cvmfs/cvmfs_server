#!/bin/sh
#
# This file is part of the CernVM File System
# This script takes care of creating and removing repositories on a
# Stratum 0 server

set -e

die() {
  echo $1 >&2
  exit 1
}

create_master_key() {
   local name=$1
   local user=$2

   master_key="/etc/cvmfs/keys/$name.masterkey"
   master_pub="/etc/cvmfs/keys/$name.pub"

   echo -n "Creating CernVM-FS master key for $name in $master_pub... "
   openssl genrsa -out $master_key 2048 > /dev/null 2>&1
   openssl rsa -in $master_key -pubout -out $master_pub > /dev/null 2>&1
   chmod 444 $master_key $master_pub
   chown $user $master_key $master_pub
   echo "done"
}


create_cert() {
   local name=$1
   local user=$2

   local key; key="/etc/cvmfs/keys/$name.key"
   local csr; csr="/etc/cvmfs/keys/$name.csr"
   local crt; crt="/etc/cvmfs/keys/$name.crt"

   # Create self-signed certificate
   echo -n "Creating self-signed certificate for $name in $crt... "
   openssl genrsa -out $key 2048 > /dev/null 2>&1
   openssl req -new -subj "/C=/ST=/L=/O=/OU=/CN=$name CernVM-FS Release Managers" -key $key -out $csr > /dev/null 2>&1
   openssl x509 -req -days 365 -in $csr -signkey $key -out $crt > /dev/null 2>&1
   rm -f $csr
   chmod 444 $key $crt
   chown $user $master_key $master_pub
   echo "done"
}


create_whitelist() {
   local name=$1
   local user=$2
   local whitelist="/srv/cvmfs/$name/pub/catalogs/.cvmfswhitelist"

   echo -n "Signing 30 day whitelist with master key... "
   echo `date -u "+%Y%m%d%H%M%S"` > ${whitelist}.unsigned
   echo "E`date -u --date='next month' "+%Y%m%d%H%M%S"`" >> ${whitelist}.unsigned
   echo "N$name" >> ${whitelist}.unsigned
   openssl x509 -fingerprint -sha1 -in /etc/cvmfs/keys/${name}.crt | grep "SHA1 Fingerprint" | sed 's/SHA1 Fingerprint=//' >> ${whitelist}.unsigned

   local sha1; sha1=`openssl sha1 < ${whitelist}.unsigned | head -c40`
   echo "--" >> ${whitelist}.unsigned
   echo $sha1 >> ${whitelist}.unsigned
   echo -n $sha1 > ${whitelist}.sha1
   openssl rsautl -inkey /etc/cvmfs/keys/${name}.masterkey -sign -in ${whitelist}.sha1 -out ${whitelist}.signature
   cat ${whitelist}.unsigned ${whitelist}.signature > $whitelist
   chown $user $whitelist

   rm -f ${whitelist}.unsigned ${whitelist}.signature ${whitelist}.sha1
   echo "done"
}


get_expiry() {
  local name=$1
  local whitelist="/srv/cvmfs/$name/pub/catalogs/.cvmfswhitelist"

  local expires=$(head -2 $whitelist| tail -1 | tail -c15)
  local year=$(echo $expires | head -c4)
  local month=$(echo $expires | head -c6 | tail -c2)
  local day=$(echo $expires | head -c8 | tail -c2)
  local expires_fmt="${year}-${month}-${day}"
  local expires_num=$(date -u -d $expires_fmt +%s)

  local now=$(/bin/date -u +%s)
  local valid_time=$(( ($expires_num-$now)/(3600*24) ))
  echo "Whitelist is valid for another $valid_time days"
}


reload_apache() {
   echo -n "Reloading Apache... "
   service httpd reload > /dev/null
   echo "done"
}


transaction() {
  local name=$1

  [ -f /var/spool/cvmfs/${name}/in_transaction ] && die "Already in a transaction"

  transaction_before_hook $name
  sudo mount -o remount,rw /cvmfs/$name
  touch /var/spool/cvmfs/${name}/in_transaction
  transaction_after_hook $name
}


abort() {
  local name=$1
  local user=$2

  [ -f /var/spool/cvmfs/${name}/in_transaction ] || die "Not in a transaction"

  reply=n
  read -p "You are about to DISCARD ALL CHANGES OF THE CURRENT TRANSACTION!  Are you sure (y/n)? " reply
  [ x"$reply" != xy ] && return

  local user_shell="sh -c"
  [ $(whoami) != $user ] && user_shell="su $user -c"

  abort_before_hook $name
  sudo umount /cvmfs/$name
  sudo rm -rf /var/spool/cvmfs/${name}/scratch
  $user_shell "mkdir /var/spool/cvmfs/${name}/scratch"
  sudo mount /cvmfs/$name
  rm -f /var/spool/cvmfs/${name}/in_transaction
  abort_after_hook $name
}


publish() {
  local name=$1
  local user=$2

  [ -f /var/spool/cvmfs/${name}/in_transaction ] || die "Not in a transaction"

  local user_shell="sh -c"
  [ $(whoami) != $user ] && user_shell="su $user -c"

  publish_before_hook $name

  sudo /bin/mount -o remount,ro /cvmfs/$name
  $user_shell "cvmfs_sync -u /cvmfs/$name \
    -s /var/spool/cvmfs/${name}/scratch \
    -c /var/spool/cvmfs/${name}/rdonly \
    -r /srv/cvmfs/${name}/pub \
    -x /var/spool/cvmfs/${name}/paths_out \
    -y /var/spool/cvmfs/${name}/hashes_in \
    -z" || die "Synchronization failed"
  $user_shell "cvmfs_sign \
    -c /etc/cvmfs/keys/${name}.crt \
    -k /etc/cvmfs/keys/${name}.key \
    -n $name \
    /srv/cvmfs/${name}/pub/catalogs/.cvmfspublished" || die "Signing failed"
  sudo umount /cvmfs/$name
  sudo umount /var/spool/cvmfs/${name}/rdonly
  sudo rm -rf /var/spool/cvmfs/${name}/scratch
  $user_shell "mkdir /var/spool/cvmfs/${name}/scratch"
  sudo mount /var/spool/cvmfs/${name}/rdonly > /dev/null
  sudo mount /cvmfs/$name

  publish_after_hook $name
}


mkfs() {
  local name=$1
  local scratch_dir="/var/spool/cvmfs/${name}/scratch"
  local rdonly_dir="/var/spool/cvmfs/${name}/rdonly"
  local repository_dir="/srv/cvmfs/${name}"

  [ $(id -u) -ne 0 ] && die "Only root can create a new repository"
  modprobe aufs || die "aufs kernel module missing"
  cat /proc/mounts | grep -q "^/etc/auto.cvmfs /cvmfs " && die "Autofs on /cvmfs has to be disabled"

  local cvmfs_user
  read -p "Owner of $name [$(whoami)]: " cvmfs_user
  [ x"$cvmfs_user" = x ] && cvmfs_user=$(whoami)
  id $cvmfs_user > /dev/null 2>&1 || die "No user $cvmfs_user"

  echo -n "Creating configuration files... "
  mkdir -p /etc/cvmfs/repositories.d/${name}
  cat > /etc/cvmfs/repositories.d/${name}/server.conf << EOF
# Created by cvmfs_server.  Don't touch.
CVMFS_REPOSITORY_NAME=$name
CVMFS_USER=$cvmfs_user
CVMFS_SHADOW_DIR=/cvmfs/$name
CVMFS_PUB_DIR=${repository_dir}/pub
CVMFS_SCRATCH_DIR=$scratch_dir
CVMFS_RDONLY_MOUNTPOINT=$rdonly_dir
EOF
  cat > /etc/httpd/conf.d/cvmfs.${name}.conf << EOF
# Created by cvmfs_server.  Don't touch.
RewriteEngine on
# Automatically point to the catalogs
RewriteCond %{REQUEST_URI} !^/cvmfs/$name/pub/catalogs/(.*)
RewriteRule ^/cvmfs/$name/(.*)$ /cvmfs/$name/pub/catalogs/\$1 [PT]
# Translation URL to real pathname
Alias /cvmfs/$name/pub ${repository_dir}/pub
# For pushing files to the worker nodes
Alias /fanout/$name /cvmfs/$name
<Directory "${repository_dir}/pub">
    Options -MultiViews FollowSymLinks
    AllowOverride All
    Order allow,deny
    Allow from all

    EnableMMAP Off
    EnableSendFile Off

    AddType application/x-cvmfs .cvmfspublished .cvmfswhitelist

    Header unset Last-Modified
    FileETag None

    ExpiresActive On
    ExpiresDefault "access plus 3 days"
    ExpiresByType text/html "access plus 5 minutes"
    ExpiresByType application/x-cvmfs "access plus 1 minutes"
</Directory>
<Directory "/cvmfs/$name">
    Options -MultiViews FollowSymLinks
    AllowOverride All
    Order allow,deny
    Allow from all

    EnableMMAP Off
    EnableSendFile Off
</Directory>
EOF
  cat > /etc/cvmfs/config.d/${name}.conf << EOF
# Created by cvmfs_server.  Don't touch.
CVMFS_SERVER_URL=http://localhost/cvmfs/$name
CVMFS_HTTP_PROXY=DIRECT
CVMFS_PUBLIC_KEY=/etc/cvmfs/keys/${name}.pub
CVMFS_STRICT_MOUNT=no
EOF
  cat >> /etc/sudoers << EOF
$cvmfs_user localhost = NOPASSWD: /bin/mount -o remount\,ro /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/mount -o remount\,rw /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/umount /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/umount /var/spool/cvmfs/${name}/rdonly # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/mount /var/spool/cvmfs/${name}/rdonly # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/mount /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/rm -rf /var/spool/cvmfs/${name}/scratch # added by CernVM-FS for $name
EOF
  echo "done"

  mkdir -p /etc/cvmfs/keys
  create_master_key $name $cvmfs_user
  create_cert $name $cvmfs_user

  echo -n "Create CernVM-FS Storage... "
  mkdir -p /cvmfs/$name \
    ${repository_dir}/pub/catalogs ${repository_dir}/pub/data \
    $scratch_dir $rdonly_dir
  mkfifo -m 0660 /var/spool/cvmfs/${name}/paths_out \
    /var/spool/cvmfs/${name}/hashes_in
  create_whitelist $name $cvmfs_user > /dev/null
  cvmfs_sync -u /cvmfs/$name -s $scratch_dir -c $rdonly_dir -r ${repository_dir}/pub > /dev/null
  cvmfs_sign -c /etc/cvmfs/keys/${name}.crt -k /etc/cvmfs/keys/${name}.key -n $name ${repository_dir}/pub/catalogs/.cvmfspublished > /dev/null
  chown -R $cvmfs_user /cvmfs/$name $repository_dir /var/spool/cvmfs/$name
  echo "done"

  reload_apache

  echo -n "Mounting CernVM-FS Storage... "
  cat >> /etc/fstab << EOF
$name $rdonly_dir cvmfs no_reload 0 0 # added by CernVM-FS for $name
aufs_$name /cvmfs/$name aufs br=${scratch_dir}=rw:${rdonly_dir}=rr,udba=none,ro 0 0 # added by CernVM-FS for $name
EOF
  mount $rdonly_dir > /dev/null
  mount /cvmfs/$name
  echo "done"

  echo -n "Starting services... "
  transaction $name > /dev/null
  echo "New CernVM-FS repository for $name" > /cvmfs/${name}/new_repository
  publish $name $cvmfs_user > /dev/null
  echo "done"

  echo "\

Install your software in /cvmfs/$name as user $cvmfs_user.
Once you're happy, publish using 'cvmfs_server publish'
For client configuration, have a look at 'cvmfs_server info'

If you go for production, backup you software signing keys in /etc/cvmfs/keys/!"
}


rmfs() {
  local name=$1

  [ $(id -u) -ne 0 ] && die "Only root can remove a repository"

  echo -n "Unmounting CernVM-FS Area... "
  sed -i -e "/added by CernVM-FS for ${name}/d" /etc/fstab
  mount | grep -q " /cvmfs/$name " && umount /cvmfs/$name
  mount | grep -q " /var/spool/cvmfs/$name/rdonly " && umount /var/spool/cvmfs/$name/rdonly
  echo "done"

  echo -n "Removing repository storage... "
  rm -rf /srv/cvmfs/${name} \
         /var/spool/cvmfs/$name \
         /cvmfs/$name
  echo "done"

  echo -n "Removing keys and configuration... "
  rm -f /etc/cvmfs/keys/$name.masterkey \
        /etc/cvmfs/keys/$name.pub \
        /etc/cvmfs/keys/$name.key \
        /etc/cvmfs/keys/$name.crt \
        /etc/cvmfs/config.d/${name}.conf \
        /etc/httpd/conf.d/cvmfs.${name}.conf
  sed -i -e "/added by CernVM-FS for ${name}/d" /etc/sudoers
  echo "done"

  echo -n "Stopping services... "
  reload_apache > /dev/null
  rm -rf /etc/cvmfs/repositories.d/$name
  echo "done"

  echo "CernVM-FS repository $name wiped out!"
}


info() {
  local name=$1

  echo "Repository name: $name"
  get_expiry $name
  echo

  echo "\
Client configuration:
Add $name to CVMFS_REPOSITORIES in /etc/cvmfs/default.local
Create /etc/cvmfs/config.d/${name}.conf and set
  CVMFS_SERVER_URL=http://`hostname`/cvmfs/$name
  CVMFS_PUBLIC_KEY=/etc/cvmfs/keys/${name}.pub
Copy /etc/cvmfs/keys/${name}.pub to the client"
}


list_repositories() {
  ls -1 /etc/cvmfs/repositories.d 2> /dev/null
}


usage() {
   echo "\
CernVM-FS Server Tool
Commands:
  mkfs <fully qualified name>: Creates a new repository with a given name
  rmfs: Removes the repository
  resign: Re-signs the 30 day whitelist
  info: Prints summary about the repository
  list: List available repositories
  transaction: Start to edit a repository
  abort: Abort transaction and return to the state before
  publish: Makes a new repository snapshot

Note: If multiple repositories are maintained, the repository name must follow
the command."
}


. /etc/cvmfs/config.sh
. /etc/cvmfs/cvmfs_server_hooks.sh

select_fqrn() {
  local given_name="$1"
  if [ x"$given_name" != x ]; then
    # Check if exists
    given_name=$(cvmfs_mkfqrn $given_name)
    [ -d /etc/cvmfs/repositories.d/$given_name ] && echo $given_name
  else
    # Check if only one repository active
    [ $(list_repositories | wc -l) -eq 1 ] && list_repositories
  fi
  return 0
}
CVMFS_REPOSITORY_NAME=$(select_fqrn $2)


case $1 in
  mkfs)
    [ x"$CVMFS_REPOSITORY_NAME" != x ] && die "There is already an active repository $CVMFS_REPOSITORY_NAME"
    CVMFS_REPOSITORY_NAME=$(cvmfs_mkfqrn $2)
    if [ x"$CVMFS_REPOSITORY_NAME" = x ]; then
      usage
      exit 2
    fi
    mkfs $CVMFS_REPOSITORY_NAME
   ;;
  rmfs)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository?"
    reply=n
    read -p "You are about to WIPE OUT THE CERNVM-FS REPOSITORY INCLUDING SIGNING KEYS!  Are you sure (y/n)? " reply
    if [ "$reply" = "y" ]; then
      rmfs $CVMFS_REPOSITORY_NAME
    fi
  ;;
  resign)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository?"
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf
    create_whitelist $CVMFS_REPOSITORY_NAME $CVMFS_USER
  ;;
  info)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository"
    info $CVMFS_REPOSITORY_NAME
  ;;
  list)
    list_repositories
  ;;
  transaction)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository"
    transaction $CVMFS_REPOSITORY_NAME
  ;;
  abort)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository"
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf
    abort $CVMFS_REPOSITORY_NAME $CVMFS_USER
  ;;
  publish)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository"
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf
    publish $CVMFS_REPOSITORY_NAME $CVMFS_USER
  ;;
  *)
    usage
  ;;
esac
