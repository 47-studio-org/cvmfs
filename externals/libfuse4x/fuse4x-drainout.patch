--- src/lib/fuse.c.vanilla	2011-07-16 03:35:27.000000000 +0200
+++ src/lib/fuse.c	2011-07-18 16:45:39.000000000 +0200
@@ -39,6 +39,25 @@
 #define FUSE_UNKNOWN_INO 0xffffffff
 #define OFFSET_MAX 0x7fffffffffffffffLL
 
+static int fuse_cache_drainout = 0; /* access only atomically */
+
+void fuse_set_cache_drainout() {
+   __sync_bool_compare_and_swap(&fuse_cache_drainout, 0, 1);
+}
+
+void fuse_unset_cache_drainout() {
+   __sync_bool_compare_and_swap(&fuse_cache_drainout, 1, 0);
+}
+
+int fuse_get_cache_drainout() {
+   return __sync_fetch_and_add(&fuse_cache_drainout, 0);
+}
+
+static int fuse_max_cache_timeout;
+int fuse_get_max_cache_timeout() {
+   return fuse_max_cache_timeout;
+}
+
 struct fuse_config {
 	unsigned int uid;
 	unsigned int gid;
@@ -1956,10 +1975,13 @@
 		if (node == NULL)
 			res = -ENOMEM;
 		else {
+            int cache_drainout = __sync_fetch_and_add(&fuse_cache_drainout, 0);
+            
 			e->ino = node->nodeid;
 			e->generation = node->generation;
-			e->entry_timeout = f->conf.entry_timeout;
-			e->attr_timeout = f->conf.attr_timeout;
+            
+            e->entry_timeout = (cache_drainout ? 0.0 : f->conf.entry_timeout);
+            e->attr_timeout = (cache_drainout ? 0.0 : f->conf.attr_timeout);
 			if (f->conf.auto_cache) {
 				pthread_mutex_lock(&f->lock);
 				update_stat(node, &e->attr);
@@ -2142,7 +2164,7 @@
 			fprintf(stderr, "LOOKUP %s\n", path);
 		fuse_prepare_interrupt(f, req, &d);
 		err = lookup_path(f, parent, name, path, &e, NULL);
-		if (err == -ENOENT && f->conf.negative_timeout != 0.0) {
+		if (err == -ENOENT && f->conf.negative_timeout != 0.0 && !__sync_fetch_and_add(&fuse_cache_drainout, 0)) {
 			e.ino = 0;
 			e.entry_timeout = f->conf.negative_timeout;
 			err = 0;
@@ -2200,7 +2222,7 @@
 			pthread_mutex_unlock(&f->lock);
 		}
 		set_stat(f, ino, &buf);
-		fuse_reply_attr(req, &buf, f->conf.attr_timeout);
+		fuse_reply_attr(req, &buf, __sync_fetch_and_add(&fuse_cache_drainout, 0) ? 0.0 : f->conf.attr_timeout);
 	} else
 		reply_err(req, err);
 }
@@ -2306,7 +2328,7 @@
 			pthread_mutex_unlock(&f->lock);
 		}
 		set_stat(f, ino, &buf);
-		fuse_reply_attr(req, &buf, f->conf.attr_timeout);
+		fuse_reply_attr(req, &buf, __sync_fetch_and_add(&fuse_cache_drainout, 0) ? 0.0 : f->conf.attr_timeout);
 	} else
 		reply_err(req, err);
 }
@@ -2853,7 +2875,7 @@
 
 		curr_time(&now);
 		if (diff_timespec(&now, &node->stat_updated) >
-		    f->conf.ac_attr_timeout) {
+		    (__sync_fetch_and_add(&fuse_cache_drainout, 0) ? 0.0 : f->conf.ac_attr_timeout)) {
 			struct stat stbuf;
 			int err;
 			pthread_mutex_unlock(&f->lock);
@@ -4166,6 +4188,16 @@
 
 	if (!f->conf.ac_attr_timeout_set)
 		f->conf.ac_attr_timeout = f->conf.attr_timeout;
+    
+        fuse_max_cache_timeout = 0;
+        if (ceil(f->conf.entry_timeout) > fuse_max_cache_timeout)
+            fuse_max_cache_timeout = ceil(f->conf.entry_timeout);
+        if (ceil(f->conf.negative_timeout) > fuse_max_cache_timeout)
+            fuse_max_cache_timeout = ceil(f->conf.negative_timeout);
+        if (ceil(f->conf.attr_timeout) > fuse_max_cache_timeout)
+            fuse_max_cache_timeout = ceil(f->conf.attr_timeout);
+        if (ceil(f->conf.ac_attr_timeout) > fuse_max_cache_timeout)
+            fuse_max_cache_timeout = ceil(f->conf.ac_attr_timeout);
 
 #if ( __FreeBSD__ || __APPLE__ )
 	/*
--- src/include/fuse.h.vanilla	2011-07-16 03:35:27.000000000 +0200
+++ src/include/fuse.h	2011-07-18 16:46:26.000000000 +0200
@@ -37,6 +37,11 @@
 extern "C" {
 #endif
 
+    void fuse_set_cache_drainout();
+    void fuse_unset_cache_drainout();
+    int fuse_get_cache_drainout();
+    int fuse_get_max_cache_timeout();
+    
 /* ----------------------------------------------------------- *
  * Basic FUSE API					       *
  * ----------------------------------------------------------- */
