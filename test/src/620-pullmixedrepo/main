cvmfs_test_name="Stratum1 / preloaded snapshot with uncompressed and external files"
cvmfs_test_autofs_on_startup=false

produce_more_files_in() {
  local working_dir=$1
  local large_file=$2

  cp $large_file $working_dir/large
  pushdir $working_dir
  echo "an uncompressed file" > nested/uncompressed
  popdir
}

produce_files_in() {
  local working_dir=$1

  pushdir $working_dir

  mkdir poems
  cat > poems/todo.txt << EOF
the empty sheet.
EOF

  cat > poems/unordnung.txt << EOF
ordnung    ordnung
ordnung    ordnung
ordnung    ordnung
ordnung    ordnung
ordnung    ordnung
ordnung    ordnung
ordnung    ordnung
ordnung  unordn  g
ordnung    ordnung
EOF

  ln -s poems/unordnung.txt unordnung

  mkdir nested
  touch nested/.cvmfscatalog
  echo foo > nested/foo

  popdir
}

graft_external() {
  local repo=$1
  local cvmfs_dir=$2
  local reference_dir=$3

  echo "I'm external" | cvmfs_swissknife zpipe > /srv/cvmfs/${repo}/external_file
  local hash=$(cat /srv/cvmfs/${repo}/external_file | cvmfs_swissknife hash -a shake128)
  local size=$(cat /srv/cvmfs/${repo}/external_file | cvmfs_swissknife zpipe -d | wc -c)
  touch ${cvmfs_dir}/external_file
  cat > ${cvmfs_dir}/.cvmfsgraft-external_file << EOF
checksum=$hash
size=$size
EOF

  ls -lah $cvmfs_dir

  cvmfs_swissknife zpipe -d < /srv/cvmfs/${repo}/external_file > ${reference_dir}/external_file
}

desaster_cleanup() {
  local mountpoint=$1
  local replica_name=$2

  sudo umount $mountpoint > /dev/null 2>&1
  sudo cvmfs_server rmfs -f $replica_name > /dev/null 2>&1
}

check_stratum1_tmp_dir_emptiness() {
  local tmp_dir="$1"
  local tmp_dir_entries
  echo "check stratum1 tmp directory"
  tmp_dir_entries=$(ls $tmp_dir | wc -l)
  echo "$tmp_dir contains: $tmp_dir_entries"
  [ $tmp_dir_entries -eq 0 ]
}

cvmfs_run_test() {
  logfile=$1
  local repo_dir=/cvmfs/$CVMFS_TEST_REPO

  local scratch_dir=$(pwd)
  mkdir reference_dir
  local reference_dir=$scratch_dir/reference_dir

  local mnt_point="$(pwd)/mountpount"
  local replica_name="$(get_stratum1_name $CVMFS_TEST_REPO)"

  echo "create a fresh repository named $CVMFS_TEST_REPO with user $CVMFS_TEST_USER"
  create_empty_repo $CVMFS_TEST_REPO $CVMFS_TEST_USER || return $?

  echo "starting transaction to edit repository"
  start_transaction $CVMFS_TEST_REPO || return $?

  echo "putting some stuff in the new repository"
  produce_files_in $repo_dir || return 3

  echo "putting exactly the same stuff in the scratch space for comparison"
  produce_files_in $reference_dir || return 4

  echo "creating CVMFS snapshot"
  publish_repo $CVMFS_TEST_REPO || return $?

  echo "compare the results of cvmfs to our reference copy"
  compare_directories $repo_dir $reference_dir || return $?

  echo "check catalog and data integrity"
  check_repository $CVMFS_TEST_REPO -i || return $?

  echo "graft external file"
  start_transaction $CVMFS_TEST_REPO || return $?
  graft_external $CVMFS_TEST_REPO $repo_dir $reference_dir || return 20
  publish_repo $CVMFS_TEST_REPO -X || return $?

  echo "compare the results of cvmfs to our reference copy"
  compare_directories $repo_dir $reference_dir || return $?

  echo "check catalog and data integrity"
  check_repository $CVMFS_TEST_REPO -i || return $?

  echo "change to uncompressed files"
  sudo sh -c "echo CVMFS_COMPRESSION_ALGORITHM=none >> \
    /etc/cvmfs/repositories.d/$CVMFS_TEST_REPO/server.conf" || return 30
  local large_file="large_file"
  dd if=/dev/urandom of=$large_file bs=1024 count=$((100*1024))
  start_transaction $CVMFS_TEST_REPO || return $?
  produce_more_files_in $repo_dir $large_file || return 31
  produce_more_files_in $reference_dir $large_file || return 32
  publish_repo $CVMFS_TEST_REPO || return $?
  echo "compare the results of cvmfs to our reference copy"
  compare_directories $repo_dir $reference_dir || return $?
  echo "check catalog and data integrity"
  check_repository $CVMFS_TEST_REPO -i || return $?
  

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  echo "create Stratum1 repository on the same machine"
  load_repo_config $CVMFS_TEST_REPO
  create_stratum1 $replica_name                          \
                  $CVMFS_TEST_USER                       \
                  $CVMFS_STRATUM0                        \
                  /etc/cvmfs/keys/${CVMFS_TEST_REPO}.pub \
    || { desaster_cleanup $mnt_point $replica_name; return 7; }

  echo -n "get Stratum 1 spool directory: "
  load_repo_config $replica_name
  local s1_spool_tmp_dir="${CVMFS_SPOOL_DIR}/tmp"
  load_repo_config $CVMFS_TEST_REPO
  echo "$s1_spool_tmp_dir"

  echo "create a Snapshot of the Stratum0 repository in the just created Stratum1 replica"
  sudo cvmfs_server snapshot $replica_name || { desaster_cleanup $mnt_point $replica_name; return 9; }

  echo "copy external file"
  cp /srv/cvmfs/${CVMFS_TEST_REPO}/external_file /srv/cvmfs/$replica_name/

  echo "check that Stratum1 spooler tmp dir is empty"
  check_stratum1_tmp_dir_emptiness $s1_spool_tmp_dir || { desaster_cleanup $mnt_point $replica_name; return 101; }

  echo "mount the Stratum1 repository on a local mountpoint"
  do_local_mount $mnt_point $CVMFS_TEST_REPO $(get_repo_url $replica_name) || { desaster_cleanup $mnt_point $replica_name; return 10; }

  echo "check if the Stratum1 repository contains exactly the same as the reference copy"
  compare_directories $mnt_point $reference_dir || { desaster_cleanup $mnt_point $replica_name; return 11; }

  echo "unmount the Stratum1 repository"
  sudo umount $mnt_point || { desaster_cleanup $mnt_point $replica_name; return 12; }

  echo "clean up"
  sudo cvmfs_server rmfs -f $replica_name

  return 0
}
