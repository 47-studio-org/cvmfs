cvmfs_test_name="DUCC container ingestion"
cvmfs_test_autofs_on_startup=true
cvmfs_test_suites="ducc"

registry=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
recipe="$(pwd)/$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1).yaml"
repository="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1).cern.ch"
ducc_log="$(pwd)/$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1).log"
ducc_err="$(pwd)/$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1).err"

ducc_test_400_clean_up() {
    printf "Cleaning up..."

    mv /etc/cvmfs/default.local.bk /etc/cvmfs/default.local
    rm -f /etc/cvmfs/config.d/$repository.conf
    #delete the docker images

    # delete the CVMFS repo
    printf "Deleting CVMFS repo..."
    cvmfs_server rmfs -f $repository >> /dev/null
    printf "done\n"

    export DUCC_DOCKER_REGISTRY_PASS=""

    # delete the recipe file
    rm $recipe
    # delete the logs and error from ducc
    rm $ducc_log
    rm $ducc_err

    # stop and delete the registry container
    printf "Stopping and deleting docker registry..."
    docker stop $registry >> /dev/null
    docker rm $registry >> /dev/null
    printf "done\n"

    printf "Reseting initial docker configuration..."
    rm -f /etc/docker/daemon.json
    mv /etc/docker/daemon.json.bk /etc/docker/daemon.json

    systemctl restart docker

    printf "done\n"
}

cvmfs_run_test() {
    trap ducc_test_400_clean_up EXIT

    # change the docker configuration to run thin images
    printf "*** Changing the docker configuration to run thin images..."

    # saving old docker configuration
    mkdir -p /etc/docker
    touch /etc/docker/daemon.json
    mv /etc/docker/daemon.json /etc/docker/daemon.json.bk

    # installing thin image plugin
    docker plugin install --grant-all-permissions cvmfs/graphdriver

    # change configuration file
    cat > /etc/docker/daemon.json << EOL
{
  "experimental": true,
  "storage-driver": "cvmfs/graphdriver",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOL

    # finally restarting docker
    systemctl restart docker.service
    docker plugin enable cvmfs/graphdriver
    printf "done\n"

    # start by running the docker registry on localhost
    printf "*** Starting docker registry for tests..."
    docker run -d -p 5000:5000 --name $registry registry:2 >> /dev/null || return 3
    printf "done\n"

    # create a simple recipe file for the repository manager in the local dir
    printf "*** Creating recipe file..."
    cat > $recipe  << EOL
version: 1
user: mock_user
cvmfs_repo: '$repository'
output_format: '\$(scheme)://localhost:5000/mock/\$(image)'
input:
    - 'https://registry.hub.docker.com/library/ubuntu:latest'
    - 'https://registry.hub.docker.com/library/centos:centos6'
EOL
    printf "done\n"

    # set the password to access the docker hub
    export DUCC_DOCKER_REGISTRY_PASS=mock_pass

    # crete the repository where to store the content
    printf "*** Creating CVMFS repo..."
    create_empty_repo $repository $USER || return $?
    printf "done\n"

    printf "*** Changing configuration to read the new repo..."
    # setting the configuration for the repo
    mv /etc/cvmfs/default.local /etc/cvmfs/default.local.bk

    cat > /etc/cvmfs/default.local << EOL
CVMFS_REPOSITORIES=$repository
CVMFS_HTTP_PROXY="DIRECT"
EOL

    cat > /etc/cvmfs/config.d/$repository.local << EOL
CVMFS_SERVER_URL=http://localhost/cvmfs/$repository/
CVMFS_PUBLIC_KEY=/etc/cvmfs/keys/$repository.pub
EOL
    printf "done\n"

    printf "*** Starting test.\n"

    printf "*** Converting recipe..."
    cvmfs_ducc convert $recipe 1> $ducc_log 2> $ducc_err || return 101
    grep -q "level=error" $ducc_err
    while [ $? -ne 1 ]
    do
        printf "*** Some error during conversion, let's do it again.\nConverting recipe..."
        rm $ducc_log $ducc_err
        cvmfs_ducc convert $recipe 1> $ducc_log 2> $ducc_err || return 101
        grep -q "level=error" $ducc_err
    done
    printf "\n*** Convert recipe successfully\n"

    printf "*** Check integrity of the repository...\n"
    check_repository $repository -i || return 102
    printf "*** Repository checked successfully\n"

    singularity exec /cvmfs/$repository/registry.hub.docker.com/library/ubuntu\:latest/ echo token-abc | grep "token-abc" || return 103
    singularity exec /cvmfs/$repository/registry.hub.docker.com/library/centos\:centos6/ echo token-xyz | grep "token-xyz" || return 104

    systemctl restart docker.service

    docker run "localhost:5000/mock/library/ubuntu:latest" echo "token-123" | grep "token-123" || return 105
    docker run "localhost:5000/mock/library/centos:centos6" echo "token-321" | grep "token-321" || return 106

    # add other possible tests

    printf "*** Test successful\n"

    return

}

