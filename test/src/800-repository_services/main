cvmfs_test_name="Repository services"
cvmfs_test_autofs_on_startup=false


set_up_repository_services() {
    echo "Setting up repository services"

    echo "  Writing configuration files"
    cat <<EOF > /opt/cvmfs_services/etc/repo.config
{repos, [{<<"test.repo.org">>, [<<"key1">>]}]}.
{keys, [{file, "/etc/cvmfs/keys/gateway_key"}]}.
EOF

    echo "  Writing API key file"
    cat <<EOF > /etc/cvmfs/keys/gateway_key
test key1 secret1
EOF

    echo "  Creating Mnesia schema"
    cd /opt/cvmfs_services
    ./scripts/setup.sh

    echo "  Creating test repo"
    cvmfs_server mkfs -o `whoami` test.repo.org

    echo "  Modifying test repo configuration"
    sed -i 's/local,/gw,/' /etc/cvmfs/repositories.d/test.repo.org/server.conf
    sed -i 's/txn,\/srv\/cvmfs\/test.repo.org/txn,http:\/\/localhost:8080\/api\/v1/g' /etc/cvmfs/repositories.d/test.repo.org/server.conf
    echo "CVMFS_GATEWAY_KEYS=/etc/cvmfs/keys/gateway_key" >> /etc/cvmfs/repositories.d/test.repo.org/server.conf

    echo "  Starting repository services application"
    /opt/cvmfs_services/bin/cvmfs_services start

    # Waiting here is necessary in order to give the cvmfs_services application enough time to boot
    wait_for_app_start
}

wait_for_app_start() {
    local reply=$(/opt/cvmfs_services/bin/cvmfs_services ping | awk {'print $1'})
    local num_iter=1
    while [ $reply != "pong" ]; do
        sleep 1
        reply=$(/opt/cvmfs_services/bin/cvmfs_services ping | awk {'print $1'})
        echo "Num iter: $num_iter"
        num_iter=$((num_iter + 1))
        if [ $num_iter -eq 10 ]; then
            break;
        fi
    done
    echo $reply
}

clean_up() {
    echo "Cleaning up"

    echo "  Stopping repository services application"
    /opt/cvmfs_services/bin/cvmfs_services stop

    echo "  Removing Mnesia directory"
    rm -rf /opt/cvmfs_mnesia

    echo "  Removing test repository"
    cvmfs_server rmfs -f test.repo.org
}

check_status() {
    echo $(( $1 || 0 ))
}

transaction_publish_success() {
    set_up_repository_services

    echo "Checking transaction + publish"

    echo "  Starting transaction"
    cvmfs_server transaction -e test.repo.org

    echo "  Writing to a file"
    echo "`date`" >> /cvmfs/test.repo.org/time.txt

    echo "  Publishing changes"
    cvmfs_server publish -e test.repo.org

    echo "  Remounting test repository"
    cvmfs_server mount -a

    echo "  Copy the file out of test repository"
    cp /cvmfs/test.repo.org/test.txt /tmp/

    clean_up
}

cvmfs_run_test() {
    trap clean_up EXIT HUP INT TERM || return $?

    transaction_publish_success
    local status=$?

    return $(check_status $status)
}

