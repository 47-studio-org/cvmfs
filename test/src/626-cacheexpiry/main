cvmfs_test_name="HTTP headers for cache expiry"
cvmfs_test_autofs_on_startup=false

get_header() {
  local url="$1"
  local header="$2"

  local content="$(curl -sI "$url" | grep -e "^$header" | sed -e "s/^$header: \(.*\)\r\+$/\1/")"
  echo -n "$content"
}

get_epoch() {
  local date_string="$1"
  date --date "$date_string" \
       --utc                 \
       +"%s"
}

get_expiry_time() {
  local url="$1"
  get_epoch "$(get_header $url 'Expires')"
}

get_max_age() {
  local url="$1"
  get_header "$url" "Cache-Control" | sed -e 's/^max-age=\([0-9]*\)$/\1/'
}

cvmfs_run_test() {
  logfile=$1
  local repo_dir=/cvmfs/$CVMFS_TEST_REPO
  local scratch_dir=$(pwd)

  echo -n "check for 'curl' utility... "
  which curl > /dev/null 2>&1 || { echo "not found"; return 1; }
  echo "found"

  echo "create a fresh repository named $CVMFS_TEST_REPO with user $CVMFS_TEST_USER"
  create_repo $CVMFS_TEST_REPO $CVMFS_TEST_USER || return $?
  local url="$(get_repo_url $CVMFS_TEST_REPO)"
  local xcvmfs="application/x-cvmfs"
  local xcvmfs_maxage=120     # 2 minutes
  local default_maxage=259200 # 3 days

  echo "check HTTP headers for .cvmfspublished"
  local murl="${url}/.cvmfspublished"
  [ $(get_epoch "1 minutes") -lt $(get_expiry_time $murl) ] || return  2
  [ $(get_epoch "3 minutes") -gt $(get_expiry_time $murl) ] || return  3
  [ $(get_max_age $murl)     -eq $xcvmfs_maxage           ] || return  4
  [ x"$(get_header $murl "Content-Type")" = x"$xcvmfs"    ] || return  5

  echo "check HTTP headers for .cvmfswhitelist"
  local wurl="${url}/.cvmfswhitelist"
  [ $(get_epoch "1 minutes") -lt $(get_expiry_time $wurl) ] || return  6
  [ $(get_epoch "3 minutes") -gt $(get_expiry_time $wurl) ] || return  7
  [ $(get_max_age $wurl)     -eq $xcvmfs_maxage           ] || return  8
  [ x"$(get_header $wurl "Content-Type")" = x"$xcvmfs"    ] || return  9

  echo "check HTTP headers for .cvmfs_master_replica"
  local surl="${url}/.cvmfs_master_replica"
  [ $(get_epoch "1 minutes") -lt $(get_expiry_time $surl) ] || return 10
  [ $(get_epoch "3 minutes") -gt $(get_expiry_time $surl) ] || return 11
  [ $(get_max_age $surl)     -eq $xcvmfs_maxage           ] || return 12
  [ x"$(get_header $surl "Content-Type")" = x"$xcvmfs"    ] || return 13

  local root_clg="$(get_current_root_catalog $CVMFS_TEST_REPO)C"
  echo "check HTTP headers for root catalog ($root_clg)"
  local rurl="$(get_object_url $CVMFS_TEST_REPO $root_clg)"
  [ $(get_epoch "2 days 23 hour") -lt $(get_expiry_time $rurl) ] || return 14
  [ $(get_epoch "3 days  1 hour") -gt $(get_expiry_time $rurl) ] || return 15
  [ $(get_max_age $rurl)          -eq $default_maxage          ] || return 16

  return 0
}

