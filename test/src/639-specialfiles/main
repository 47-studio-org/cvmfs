cvmfs_test_name="Handling special files"

test_repo_config="/etc/cvmfs/repositories.d/$CVMFS_TEST_REPO/server.conf"

filename=""
publish_output=""

unionfs="overlayfs"
ignore_special_files="true"
dev_type="c"
newdir="false"

_setup() {
    export CVMFS_TEST_UNIONFS="$unionfs"

    create_repo "$CVMFS_TEST_REPO" "$CVMFS_TEST_USER" "/tmp/debug.log" 1>/dev/null

    if [ $ignore_special_files = "true" ]; then
        echo "CVMFS_IGNORE_SPECIAL_FILES=$ignore_special_files" | sudo tee -a $test_repo_config
    fi

    start_transaction "$CVMFS_TEST_REPO" || return 1

    if [ $newdir = "true" ]; then
        sudo mkdir "/cvmfs/$CVMFS_TEST_REPO/dev"
        sudo mknod "/cvmfs/$CVMFS_TEST_REPO/dev/$filename" "$dev_type" 10 20 || return 2
    else
        sudo mknod "/cvmfs/$CVMFS_TEST_REPO/$filename" "$dev_type" 10 20 || return 2
    fi

    publish_output="$(publish_repo $CVMFS_TEST_REPO 2>&1)" || return 3

    return 0
}

_cleanup() {
    destroy_repo "$CVMFS_TEST_REPO" 1>/dev/null
}

# check character device with major-minor other than 0-0 in alredy existing dir
test_chrdev_basic() {
    filename="chardev_10_20"
    dev_type="c"
    newdir="false"
    ignore_special_files="true"
    _setup || return $?

    # assert 1: check the old message
    echo "$publish_output" | grep -i "'$filename' should be deleted"
    local status1=$(( $? == 1 ))

    # assert 2: check the new message
    echo  "$publish_output" | grep -i "'$filename'.*ignoring"
    local status2=$?

    _cleanup

    return $(( $status1 == 0 && $status2 == 0 ))
}

# check block device in an alredy existing dir
test_blkdev_basic() {
    filename="blockdev_10_20"
    dev_type="b"
    newdir="false"
    ignore_special_files="true"
    _setup || return $?

    echo "$publish_output" | grep -i "$filename.*ignoring"
    local status1=$?

    _cleanup

    return $status1
}

# check character device with major-minor other than 0-0 in a new dir
test_chrdev_newdir() {
    filename="chardev_10_20"
    dev_type="c"
    newdir="true"
    ignore_special_files="true"
    _setup || return $?

    echo "$publish_output" | grep -i "$filename.*ignoring"
    local status1=$?

    _cleanup

    return $status1
}

# check block device with major-minor other than 0-0 in a new dir
test_blkdev_newdir() {
    filename="blockdev_10_20"
    dev_type="b"
    newdir="true"
    ignore_special_files="true"
    _setup || return $?

    echo "$publish_output" | grep -i "$filename.*ignoring"
    local status1=$?

    _cleanup

    return $status1
}

test_fail_chrdev() {
    filename="chardev_10_20"
    dev_type="c"
    newdir="false"
    ignore_special_files="false"
    _setup
    return $?
}

test_fail_blkdev() {
    filename="blkdev_10_20"
    dev_type="b"
    newdir="false"
    ignore_special_files="false"
    _setup
    return $?
}

run_tests_base() {
    test_chrdev_basic
    local status1=$?
    [ $status1 = 0 ] || echo "Check 1 Failed with err code: $status1"

    test_blkdev_basic
    local status2=$?
    [ $status2 = 0 ] || echo "Check 2 Failed with err code: $status2"

    test_chrdev_newdir
    local status3=$?
    [ $status3 = 0 ] || echo "Check 3 Failed with err code: $status3"

    test_blkdev_newdir
    local status4=$?
    [ $status4 = 0 ] || echo "Check 4 Failed with err code: $status4"

    test_fail_chrdev
    test $? -gt 0
    local status5=$?
    [ $status5 = 0 ] || echo "Check 5 Failed with err code: $status5"

    test_fail_blkdev
    test $? -gt 0
    local status6=$?
    [ $status6 = 0 ] || echo "Check 6 Failed with err code: $status6"

    return $(($status1 || $status2 || $status3 || $status4 || $status5 || $status6))
}

run_aufs_tests() {
    unionfs="aufs"
    run_tests_base
    return $?
}

run_overlayfs_tests() {
    unionfs="overlayfs"
    run_tests_base
    return $?
}

cvmfs_run_test() {
    run_aufs_tests
    local status1=$?

    run_overlayfs_tests
    local status2=$?

    return $(($status1 || $status2))
}
